<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on kflansburg.com</title>
    <link>/tags/rust/</link>
    <description>Recent content in Rust on kflansburg.com</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Kevin Flansburg</copyright>
    <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Detecting Undefined Behavior in Rust with Miri in GitHub Actions</title>
      <link>/posts/improving-rust-codebase-quality-with-miri-in-ci/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/posts/improving-rust-codebase-quality-with-miri-in-ci/</guid>
      <description>&lt;p&gt;Miri is an interpreter for Rust&amp;rsquo;s mid-level intermediate representation (MIR), which allows for the detection of undefined behavior and other errors at compile time. Integrating Miri into Continuous Integration (CI) workflows can significantly improve the quality of a Rust codebase by catching errors early in the development process. This can be especially important if your codebase requires the use of unsafe blocks of Rust code which may prevent the Rust compiler from catching bugs that you would normally expect it to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merge Queues with Bors</title>
      <link>/posts/merge-queues/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/posts/merge-queues/</guid>
      <description>&lt;p&gt;Many engineering teams and open source projects are introducing merge queues as&#xA;part of their workflows. This post explores several reasons for using a merge&#xA;queue and describes how to set up Bors, the merge queue implementation used by&#xA;the Rust language project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Speed up Rust Builds with Cachepot</title>
      <link>/posts/rust-cachepot/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/posts/rust-cachepot/</guid>
      <description>&lt;p&gt;One of the most effective ways for speeding up Rust builds is to cache the&#xA;compiled artifacts of crate dependencies. Cargo does this automatically for&#xA;local builds, but this quickly breaks down for distributed scenarios.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I will share my experiences with configuring and using Cachepot,&#xA;a tool which wraps the Rust compiler and automatically caches build artifacts&#xA;using a variety of cloud storage options. This creates a cache which can be&#xA;shared amongst teams, used in ephemeral CI/CD environments, and even used for&#xA;distributed builds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Krator: My God, it&#39;s Full of States!</title>
      <link>/posts/introducing-krator/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/posts/introducing-krator/</guid>
      <description>At the beginning of February, I published my second guest post on Deis Labs&amp;rsquo; blog, which introduced Krator. Pronounced &amp;ldquo;crater&amp;rdquo;, this crate allows you to build Kubernetes Operators in Rust, using the state machine API that we designed for Krustlet last year. Check out the post for an example of writing an Operator with this crate!</description>
    </item>
    <item>
      <title>Rust Continuous Delivery</title>
      <link>/posts/rust-continuous-delivery/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/rust-continuous-delivery/</guid>
      <description>&lt;p&gt;Over the last few years I have iterated several times on continuous delivery&#xA;pipelines for Rust applications. Designing these pipelines involves balancing&#xA;a number of factors including cost, complexity, ergonomics, and rigor. In this&#xA;post I will describe several of these iterations, lessons learned, and share my&#xA;most recent solution in detail.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Fistful of States: More State Machine Patterns in Rust</title>
      <link>/posts/a-fistful-of-states/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/posts/a-fistful-of-states/</guid>
      <description>My recent guest post on Deis Labs&amp;rsquo; blog offers a deep dive into my work on Krustlet, including the design and implementation of a flexible state machine API for specifying custom Kubelet behavior in a type-safe framework.</description>
    </item>
  </channel>
</rss>
